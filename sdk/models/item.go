// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Item Item defines the structure for an API Food Item
//
// swagger:model Item
type Item struct {

	// What times this item is available.
	// Range provided as Array of Array of two strings
	AvailableTimes [][]string `json:"availableTimes"`

	// Category this Item belongs to, array of Strings. Used for grouping Items under menu
	Category []string `json:"category"`

	// Cuisine this Item belongs to
	Cuisine string `json:"cuisine,omitempty"`

	// Is the Item Customizable. Defaults to False
	Customizable bool `json:"customizable,omitempty"`

	// Description of this Item
	// Required: true
	Description *string `json:"description"`

	// Is the Item still made? Active?
	// Defaults to False, meaning Item is still being made and active
	DontMakeItAnymore bool `json:"dontMakeItAnymore,omitempty"`

	// The ID of this Item
	// Minimum: 1
	ID int64 `json:"id,omitempty"`

	// Name of this Item
	// Required: true
	Name *string `json:"name"`

	// Whether this Item is Non-vegetarian
	// Defaults to False if not provided - Item is Vegetarian by default
	NonVegetarian bool `json:"nonVegetarian,omitempty"`

	// Price of this Item
	// Required: true
	// Minimum: 0.01
	Price *float32 `json:"price"`

	// The SKU of this Item. UUID format
	// Required: true
	// Pattern: [a-zA-Z0-9]{12}
	SKU *string `json:"sku"`

	// Tags to be associated with this Item.
	// Helpful as search keywords
	Tags []string `json:"tags"`

	// The Vendor Code of this Item. UUID format
	// Required: true
	// Pattern: [a-zA-Z0-9]{12}
	VendorCode *string `json:"vendorCode"`
}

// Validate validates this item
func (m *Item) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSKU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendorCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Item) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *Item) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinimumInt("id", "body", int64(m.ID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Item) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Item) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	if err := validate.Minimum("price", "body", float64(*m.Price), 0.01, false); err != nil {
		return err
	}

	return nil
}

func (m *Item) validateSKU(formats strfmt.Registry) error {

	if err := validate.Required("sku", "body", m.SKU); err != nil {
		return err
	}

	if err := validate.Pattern("sku", "body", string(*m.SKU), `[a-zA-Z0-9]{12}`); err != nil {
		return err
	}

	return nil
}

func (m *Item) validateVendorCode(formats strfmt.Registry) error {

	if err := validate.Required("vendorCode", "body", m.VendorCode); err != nil {
		return err
	}

	if err := validate.Pattern("vendorCode", "body", string(*m.VendorCode), `[a-zA-Z0-9]{12}`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Item) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Item) UnmarshalBinary(b []byte) error {
	var res Item
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
