// Code generated by go-swagger; DO NOT EDIT.

package items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/rramesh/eatables/sdk/models"
)

// ListSingleItemReader is a Reader for the ListSingleItem structure.
type ListSingleItemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListSingleItemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListSingleItemOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewListSingleItemNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListSingleItemOK creates a ListSingleItemOK with default headers values
func NewListSingleItemOK() *ListSingleItemOK {
	return &ListSingleItemOK{}
}

/*ListSingleItemOK handles this case with default header values.

A list of eatable items returned in the response
*/
type ListSingleItemOK struct {
	Payload []*models.Item
}

func (o *ListSingleItemOK) Error() string {
	return fmt.Sprintf("[GET /items/{id}][%d] listSingleItemOK  %+v", 200, o.Payload)
}

func (o *ListSingleItemOK) GetPayload() []*models.Item {
	return o.Payload
}

func (o *ListSingleItemOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSingleItemNotFound creates a ListSingleItemNotFound with default headers values
func NewListSingleItemNotFound() *ListSingleItemNotFound {
	return &ListSingleItemNotFound{}
}

/*ListSingleItemNotFound handles this case with default header values.

Generic error message returned as a string
*/
type ListSingleItemNotFound struct {
	Payload *models.GenericError
}

func (o *ListSingleItemNotFound) Error() string {
	return fmt.Sprintf("[GET /items/{id}][%d] listSingleItemNotFound  %+v", 404, o.Payload)
}

func (o *ListSingleItemNotFound) GetPayload() *models.GenericError {
	return o.Payload
}

func (o *ListSingleItemNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
